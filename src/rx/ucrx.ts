import { UcToken } from '../syntax/uc-token.js';

/**
 * Charge receiver interface.
 *
 * Implementations of this interface typically generated by compiler.
 *
 * More methods could be added to this interface to reflect custom charges. It is expected that custom method names
 * to be at least four characters long.
 */
export interface Ucrx {
  /**
   * Array of expected value types.
   *
   * Used for error messages.
   */
  get types(): readonly string[];

  /**
   * Charges boolean value.
   *
   * @param value - Charged value.
   *
   * @returns Either `1` if charge succeed, or `0` for unexpected boolean.
   */
  bol(value: boolean): 0 | 1;

  /**
   * Charges big integer value.
   *
   * @param value - Charged value.
   *
   * @returns Either `1` if charge succeed, or `0` for unexpected big integer.
   */
  big(value: bigint): 0 | 1;

  /**
   * Charges opaque (unrecognized) entity.
   *
   * Called for unhandled entities.
   *
   * @param value - Charged entity tokens.
   *
   * @returns Either `1` if charge succeed, or `0` for unexpected entity.
   */
  ent(value: readonly UcToken[]): 0 | 1;

  /**
   * Charges nested list.
   *
   * @returns Either nested list charge receiver, or `undefined` for unexpected nested list.
   */
  nls(): Ucrx | undefined;

  /**
   * Charges `null` value.
   *
   * @returns Either `1` if charge succeed, or ``0` for unexpected `null`.
   */
  nul(): 0 | 1;

  /**
   * Charges number value.
   *
   * @param value - Charged value.
   *
   * @returns Either `1` if charge succeed, or `0` for unexpected number.
   */
  num(value: number): 0 | 1;

  /**
   * Charges string value.
   *
   * @param value - Charged value.
   *
   * @returns Either `1` if charge succeed, or `0` for unexpected number.
   */
  str(value: string): 0 | 1;

  /**
   * Starts charging of map entry.
   *
   * @param key - Target entry key.
   *
   * @returns Either entry receiver, `0` for unexpected map, or `undefined` for unexpected entry.
   */
  for(key: PropertyKey): Ucrx | 0 | undefined;

  /**
   * Finishes map charge.
   *
   * Called after all map entries {@link for charged}, unless the map is empty.
   *
   * The returned `0` makes sense for empty maps only. Otherwise, a preceding call to {@link for} has to return 0,
   * which prevents the map charge.
   *
   * @returns `1` if charge succeed, or `0` for unexpected map.
   */
  map(): 0 | 1;

  /**
   * Starts charging of list.
   *
   * Always called _before_ the first item charge. In case of map item, always called _before_ {@link map map charge
   * finished}, but not necessarily before {@link for entries charged}.
   *
   * @returns `1` if charge succeed, or `0` for unexpected list.
   */
  and(): 0 | 1;

  /**
   * Finishes list charge.
   *
   * Always called _after_ {@link and} call(s).
   *
   * May also be called for single values. I.e. without preceding call to {@link and}. This is not guaranteed though.
   */
  end(): void;
}
