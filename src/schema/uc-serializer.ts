import { ucModelName } from './uc-model-name.js';
import { UcModel } from './uc-schema.js';

/**
 * Data serializer signature.
 *
 * Writes the given data `value` to the given `stream`.
 *
 * Serializers generated by {@link churi/compiler!UcsLib compiler}.
 *
 * @typeParam T - Serialized data type.
 * @param stream - Writable stream to serialize the data to.
 * @param value - Data value to serialize.
 *
 * @returns Promise resolved when data serialized.
 */
export type UcSerializer<in T> = (stream: WritableStream<Uint8Array>, value: T) => Promise<void>;

/**
 * Creates serializer for the given data `model`.
 *
 * **This is a placeholder**. It is replaced with actual serializer when TypeScript compiled with
 * [ts-transformer-churi] enabled.
 *
 * [ts-transformer-churi]: https://www.npmjs.com/package/ts-transformer-churi
 *
 * @typeParam T - Serialized data type.
 * @param model - Serialized data model.
 *
 * @returns Serializer instance.
 */
export function createUcSerializer<T>(model: UcModel<T>): UcSerializer<T> {
  throw new TypeError(
    `Can not create serializer for ${ucModelName(
      model,
    )}. Is "ts-transform-churi" transformer applied?`,
  );
}
