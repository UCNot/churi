import { asis } from '@proc7ts/primitives';
import { UcdUcrx, UcdUcrxLocation } from '../compiler/deserialization/ucd-ucrx.js';
import { UcPrimitive } from './uc-primitive.js';
import { ucSchemaName } from './uc-schema-name.js';
import { UcSchema, UcSchema__symbol } from './uc-schema.js';
import { UcValue } from './uc-value.js';

/**
 * URI charge list represented as JavaScript array.
 *
 * @typeParam TValue - List item value type.
 */
export type UcList<TValue = UcPrimitive> = UcValue<TValue>[];

export namespace UcList {
  /**
   * URI charge schema definition for JavaScript {@link UcList array} serialized as list.
   *
   * Such schema can be built with {@link ucList} function.
   *
   * @typeParam TItemSpec - Type of list item schema specifier.
   */
  export interface Schema<
    TItem = unknown,
    TItemSpec extends UcSchema.Spec<TItem> = UcSchema.Spec<TItem>,
  > extends UcSchema<TItem[]> {
    readonly type: 'list';

    /**
     * List item schema.
     */
    readonly item: UcSchema.Of<TItemSpec>;

    /**
     * Generates initialization code of {@link @hatsy/churi!Ucrx charge receiver} properties.
     *
     * {@link @hatsy/churi/compiler!ListUcdDef List deserializer definition} is used by default.
     *
     * @param location - A location inside deserializer function to insert generated code into.
     *
     * @returns Per-property initializers, or `undefined` if the receiver can not be generated.
     */
    initRx?(
      location: UcdUcrxLocation<TItem[], UcList.Schema<TItem, TItemSpec>>,
    ): UcdUcrx | undefined;
  }

  export namespace Schema {
    /**
     * Schema specifier of URI charge list.
     *
     * @typeParam TItemSpec - Type of list item schema specifier.
     */
    export type Spec<TItem, TItemSpec extends UcSchema.Spec<TItem> = UcSchema.Spec<TItem>> =
      | Schema<TItem, TItemSpec>
      | Ref<TItem, TItemSpec>;

    /**
     * Reference to schema of URI charge list.
     *
     * @typeParam TItemSpec - Type of list item schema specifier.
     */
    export type Ref<
      TItem,
      TItemSpec extends UcSchema.Spec<TItem> = UcSchema.Spec<TItem>,
    > = UcSchema.Ref<TItem[], Schema<TItem, TItemSpec>>;

    /**
     * Additional options for URI charge list schema.
     */
    export interface Options<TItem, TItemSpec extends UcSchema.Spec<TItem>> {
      /**
       * Unique schema identifier.
       *
       * @defaultValue Autogenerated string.
       */
      readonly id?: string | UcSchema.Class | undefined;

      /**
       * Generates initialization code of {@link @hatsy/churi!Ucrx charge receiver} properties.
       *
       * {@link @hatsy/churi/compiler!ListUcdDef List deserializer definition} is used by default.
       *
       * @param location - A location inside deserializer function to insert generated code into.
       *
       * @returns Per-property initializers, or `undefined` if the receiver can not be generated.
       */
      initRx?(
        location: UcdUcrxLocation<TItem[], UcList.Schema<TItem, TItemSpec>>,
      ): UcdUcrx | undefined;
    }
  }
}

/**
 * Creates a reference to URI charge schema for JavaScript {@link UcList array} serialized as list.
 *
 * @typeParam TItemSpec - Type of list item schema specifier.
 * @param itemSpec - List item schema specifier.
 *
 * @returns Reference to schema of URI charge list.
 */
export function ucList<TItem, TItemSpec extends UcSchema.Spec<TItem> = UcSchema.Spec<TItem>>(
  itemSpec: TItemSpec,
  options?: UcList.Schema.Options<TItem, TItemSpec>,
): UcList.Schema.Ref<TItem, TItemSpec>;

export function ucList<TItem, TItemSpec extends UcSchema.Spec<TItem> = UcSchema.Spec<TItem>>(
  itemSpec: TItemSpec,
  { id, initRx }: UcList.Schema.Options<TItem, TItemSpec> = {},
): UcList.Schema.Ref<TItem, TItemSpec> {
  return {
    [UcSchema__symbol]: resolver => {
      const item = resolver.schemaOf(itemSpec) as UcSchema.Of<TItemSpec>;

      return {
        type: 'list',
        id: id ?? `list_${++UcList$idSeq}`,
        asis,
        item,
        initRx,
        toString() {
          return `${ucSchemaName(item)}[]`;
        },
      };
    },
  };
}

let UcList$idSeq = 0;
