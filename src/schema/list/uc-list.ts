import { COMPILER_MODULE } from '../../impl/module-names.js';
import { UcInstructions } from '../uc-instructions.js';
import { ucSchemaName } from '../uc-schema-name.js';
import { UcSchema, ucSchema } from '../uc-schema.js';

/**
 * URI charge list represented as JavaScript array.
 *
 * @typeParam TItem - List item value type.
 */
export type UcList<TItem = unknown> = TItem[];

export namespace UcList {
  /**
   * URI charge schema definition for JavaScript {@link UcList array} serialized as list.
   *
   * Such schema can be built with {@link ucList} function.
   *
   * @typeParam TItemSpec - Type of list item schema specifier.
   */
  export interface Schema<
    TItem = unknown,
    TItemSpec extends UcSchema.Spec<TItem> = UcSchema.Spec<TItem>,
  > extends UcSchema<TItem[]> {
    readonly type: 'list';

    /**
     * List item schema.
     */
    readonly item: UcSchema.Of<TItemSpec>;
  }

  export namespace Schema {
    /**
     * Additional options for URI charge list schema.
     */
    export interface Options {
      /**
       * Unique schema identifier.
       *
       * @defaultValue Autogenerated string.
       */
      readonly id?: string | UcSchema.Class | undefined;
    }
  }
}

/**
 * Creates a reference to URI charge schema for JavaScript {@link UcList array} serialized as list.
 *
 * @typeParam TItemSpec - Type of list item schema specifier.
 * @param itemSpec - List item schema specifier.
 *
 * @returns Reference to schema of URI charge list.
 */
export function ucList<TItem, TItemSpec extends UcSchema.Spec<TItem> = UcSchema.Spec<TItem>>(
  itemSpec: TItemSpec,
  options?: UcList.Schema.Options,
): UcList.Schema<TItem, TItemSpec>;

export function ucList<TItem, TItemSpec extends UcSchema.Spec<TItem> = UcSchema.Spec<TItem>>(
  itemSpec: TItemSpec,
  { id }: UcList.Schema.Options = {},
): UcList.Schema<TItem, TItemSpec> {
  const item = ucSchema(itemSpec) as UcSchema.Of<TItemSpec>;

  return {
    type: 'list',
    id: id ?? `list_${++UcList$idSeq}`,
    with: UcList$instructions,
    item,
    toString() {
      return `${ucSchemaName(item)}[]`;
    },
  };
}

let UcList$idSeq = 0;

const UcList$instructions: UcInstructions = {
  deserializer: {
    use: {
      from: COMPILER_MODULE,
      feature: 'ListUcrxTemplate',
    },
  },
  serializer: {
    use: {
      from: COMPILER_MODULE,
      feature: 'ucsSupportList',
    },
  },
};
